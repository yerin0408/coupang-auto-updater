import os
import hmac
import hashlib
import time
import requests
from bs4 import BeautifulSoup
import json
import datetime
from datetime import timezone

# --- 🎈 설정값 ---
# GitHub Actions의 Secrets에서 API 키를 가져옵니다.
ACCESS_KEY = os.environ.get('COUPANG_ACCESS_KEY')
SECRET_KEY = os.environ.get('COUPANG_SECRET_KEY')

# WING 로그인 ID와 이미지 고정 URL만 본인 정보에 맞게 수정해주세요.
VENDOR_ID = "A00835730"  # ✅ 본인 쿠팡 판매자 ID (WING 로그인 ID)
IMAGE_FIXED_URL = "https://gi.esmplus.com/na100shop/mall/DAY.jpg" # ✅ 매주 교체할 이미지의 고정 URL

DOMAIN = "https://api-gateway.coupang.com"

# --- API 서명 생성 함수 ---
def generate_signature(method, path, secret_key, access_key, query=""):
    now = datetime.datetime.now(timezone.utc)
    timestamp = now.strftime("%y%m%dT%H%M%S") + "Z"
    message = timestamp + method + path + query
    signature = hmac.new(secret_key.encode('utf-8'), message.encode('utf-8'), hashlib.sha256).hexdigest()
    return f"CEA algorithm=HmacSHA256, access-key={access_key}, signed-date={timestamp}, signature={signature}"

# --- 1. 판매 중인 모든 상품 ID 가져오는 함수 ---
def get_all_product_ids():
    print("✅ 1. 전체 상품 목록 조회를 시작합니다...")
    product_ids = []
    path = "/v2/providers/seller_api/v1/products"
    next_token = None
    while True:
        query = f"?vendorId={VENDOR_ID}&maxPerPage=100"
        if next_token:
            query += f"&nextToken={next_token}"

        try:
            auth = generate_signature("GET", path, SECRET_KEY, ACCESS_KEY, query)
            response = requests.get(DOMAIN + path + query, headers={"Authorization": auth})
            response.raise_for_status()
            data = response.json()
            for item in data.get('data', []):
                product_ids.append(item['sellerProductId'])
            next_token = data.get('nextToken')
            if not next_token: break
            time.sleep(0.5)
        except requests.exceptions.HTTPError as e:
            print(f"❌ 상품 목록 조회 실패: {e.response.text}")
            return []
    print(f"✅ 총 {len(product_ids)}개의 상품 ID를 성공적으로 가져왔습니다.")
    return product_ids

# --- 2. 특정 상품의 전체 JSON 정보를 가져오는 함수 ---
def get_product_full_json(product_id):
    path = f"/v2/providers/seller_api/apis/api/v1/marketplace/seller-products/{product_id}"
    try:
        auth = generate_signature("GET", path, SECRET_KEY, ACCESS_KEY)
        response = requests.get(DOMAIN + path, headers={"Authorization": auth})
        response.raise_for_status()
        return response.json().get('data', {})
    except requests.exceptions.HTTPError as e:
        print(f"   🔥 상품 ID {product_id} 정보 조회 실패: {e.response.text}")
        return None

# --- 3. 상품 수정 요청 함수 ---
def request_product_update(product_id, image_url):
    print(f"\n--- 상품 ID {product_id} 업데이트 작업 시작 ---")
    product_json = get_product_full_json(product_id)
    if not product_json: return

    try:
        is_modified = False
        for item in product_json.get('items', []):
            for content_block in item.get('contents', []):
                if content_block.get('contentsType') == 'HTML':
                    for detail in content_block.get('contentDetails', []):
                        soup = BeautifulSoup(detail.get('content', ''), 'lxml')
                        if soup.find('img'):
                            soup.find('img')['src'] = image_url
                            detail['content'] = str(soup)
                            is_modified = True

        if not is_modified:
            print("   - 수정할 이미지를 찾지 못해 건너뜁니다.")
            return

        keys_to_remove_from_root = ["statusName", "productId", "mdId", "mdName", "contributorType", "status", "roleCode", "trackingId"]
        for key in keys_to_remove_from_root:
            if key in product_json: del product_json[key]

        for item in product_json.get('items', []):
            keys_to_remove_from_item = ["vendorItemId", "itemId", "isAutoGenerated"]
            for key in keys_to_remove_from_item:
                if key in item: del item[key]

        product_json['requested'] = True

        path_put = "/v2/providers/seller_api/apis/api/v1/marketplace/seller-products"
        auth_put = generate_signature("PUT", path_put, SECRET_KEY, ACCESS_KEY)
        headers = {"Authorization": auth_put, "Content-Type": "application/json", "X-VENDOR-ID": VENDOR_ID}

        response_put = requests.put(DOMAIN + path_put, headers=headers, data=json.dumps(product_json))
        response_put.raise_for_status()
        print(f"   👍 수정 및 승인 요청 성공!")

    except Exception as e:
        print(f"   🔥 처리 중 오류 발생: {e}")

# --- 메인 실행 함수 ---
def main():
    print("🚀 쿠팡 전체 상품 이미지 업데이트 자동화를 시작합니다.")

    product_ids = get_all_product_ids()
    if not product_ids:
        print("작업할 상품이 없습니다. 종료합니다.")
        return

    cache_buster = f"?v={int(time.time())}"
    final_image_url = IMAGE_FIXED_URL + cache_buster
    print(f"\n✅ 적용할 이미지 URL: {final_image_url}\n")

    for pid in product_ids:
        request_product_update(pid, final_image_url)
        time.sleep(1) # 쿠팡 서버 부하를 줄이기 위해 1초 대기

    print("\n🎉 모든 상품에 대한 작업이 완료되었습니다. 쿠팡 WING에서 최종 승인 상태를 확인해주세요.")

if __name__ == "__main__":
    main()