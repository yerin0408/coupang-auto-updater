# test_update_final_clean.py
import hmac
import hashlib
import requests
import json
import datetime
from datetime import timezone
from bs4 import BeautifulSoup

# --- 🎈 메모장에 복사해 둔 깨끗한 키를 다시 한번 정확하게 입력해주세요 ---
ACCESS_KEY = "39acc047-446a-4d29-a209-c00be1d886fd"
SECRET_KEY = "a9ee22722649b6e6c2b2a5c1b9ae8900af76d143"
VENDOR_ID = "A00835730"
TEST_PRODUCT_ID = 15494346373  # 테스트할 상품 ID
NEW_IMAGE_URL = "https://gi.esmplus.com/na100shop/mall/DAY.jpg"

DOMAIN = "https://api-gateway.coupang.com"

# --- API 서명 생성 함수 ---
def generate_signature(method, path, secret_key, access_key, query=""):
    now = datetime.datetime.now(timezone.utc)
    timestamp = now.strftime("%y%m%dT%H%M%S") + "Z"
    message = timestamp + method + path + query
    signature = hmac.new(secret_key.encode('utf-8'), message.encode('utf-8'), hashlib.sha256).hexdigest()
    return f"CEA algorithm=HmacSHA256, access-key={access_key}, signed-date={timestamp}, signature={signature}"

# --- 1. 상품 정보 조회 함수 ---
def get_product_full_json(product_id):
    path = f"/v2/providers/seller_api/apis/api/v1/marketplace/seller-products/{product_id}"
    try:
        auth = generate_signature("GET", path, SECRET_KEY, ACCESS_KEY)
        response = requests.get(DOMAIN + path, headers={"Authorization": auth})
        response.raise_for_status()
        return response.json().get('data', {})
    except requests.exceptions.HTTPError as e:
        print(f"🔥 상품 정보 조회 실패: {e.response.text}")
        return None

# --- 2. 상품 수정 요청 함수 ---
def request_product_update(product_id, image_url):
    product_json = get_product_full_json(product_id)
    if not product_json: return

    try:
        is_modified = False
        for item in product_json.get('items', []):
            for content_block in item.get('contents', []):
                if content_block.get('contentsType') == 'HTML':
                    for detail in content_block.get('contentDetails', []):
                        soup = BeautifulSoup(detail.get('content', ''), 'lxml')
                        if soup.find('img'):
                            soup.find('img')['src'] = image_url
                            detail['content'] = str(soup)
                            is_modified = True

        if not is_modified:
            print("수정할 이미지를 찾지 못했습니다.")
            return

        keys_to_remove_from_root = ["statusName", "productId", "mdId", "mdName", "contributorType", "status", "roleCode", "trackingId"]
        for key in keys_to_remove_from_root:
            if key in product_json: del product_json[key]

        for item in product_json.get('items', []):
            keys_to_remove_from_item = ["vendorItemId", "itemId", "isAutoGenerated"]
            for key in keys_to_remove_from_item:
                if key in item: del item[key]

        product_json['requested'] = True

        path_put = "/v2/providers/seller_api/apis/api/v1/marketplace/seller-products"
        auth_put = generate_signature("PUT", path_put, SECRET_KEY, ACCESS_KEY)
        headers = {"Authorization": auth_put, "Content-Type": "application/json", "X-VENDOR-ID": VENDOR_ID}

        response_put = requests.put(DOMAIN + path_put, headers=headers, data=json.dumps(product_json))
        response_put.raise_for_status()
        print(f"✅ 수정 및 승인 요청 성공! 응답: {response_put.text}")

    except requests.exceptions.HTTPError as e:
        print(f"🔥 수정 요청 실패: {e.response.text}")
    except Exception as e:
        print(f"🔥 처리 중 오류 발생: {e}")

# --- 실행 ---
if __name__ == "__main__":
    request_product_update(TEST_PRODUCT_ID, NEW_IMAGE_URL)